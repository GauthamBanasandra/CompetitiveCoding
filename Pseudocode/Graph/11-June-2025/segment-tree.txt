class SegmentTree {
    SegmentTree(vector<int> nums)

    int left(p) {
        return p << 1
    }

    int right(p) {
        return (p << 1) + 1
    }

    void build(p, L, R)
    int rmq(p, L, R, i, j)
    int rmq(i, j)

    int n
    vector<int> st, nums
}

SegmentTree(vector<int> nums) : nums(nums), n(nums.size()) {
    st.resize(n)
    build(1, 0, n - 1)
}

void build(p, L, R) {
    if (L == R) {
        st[p] = L
    } else {
        build(left(p), L, (L + R) / 2)
        build(right(p), (L + R) / 2 + 1, R)

        p1 = st[left(p)]
        p2 = st[right(p)]
        st[p] = (nums[p1] <= nums[p2]) ? p1 : p2
    }
}

int rmq(p, L, R, i, j) {
    if (i > R || j < L) {
        return -1
    }

    if (L >= i && R <= j) {
        return st[p]
    }

    p1 = rmq(left(p), L, (L + R) / 2, i, j)
    p2 = rmq(right(p), (L + R) / 2 + 1, R, i, j)

    if (p1 == -1) {
        return p2
    }

    if (p2 == -1) {
        return p1
    }

    return (nums[p1] <= nums[p2]) ? p1 : p2
}

int rmq(i, j) {
    return rmq(1, 0, n - 1, i, j)
}
